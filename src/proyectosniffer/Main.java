/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectosniffer;

import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

public class Main extends javax.swing.JFrame implements MouseListener,Runnable {

    jnetpcaphelper helper = null;
    boolean al_vuelo = false;
    int opcion = -1;
    boolean running = false;
    Thread t;
    ArrayList<Trama> tramas = new ArrayList<Trama>();
    public Main() {
        initComponents();
        interfaces.setVisible(false);
        helper = new jnetpcaphelper(); 
        play.setEnabled(false);
        jt.addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        informacion = new javax.swing.JTextArea();
        play = new javax.swing.JButton();
        importar = new javax.swing.JButton();
        exportar = new javax.swing.JButton();
        estadisticas = new javax.swing.JButton();
        interfaces = new javax.swing.JComboBox<>();
        alvuelo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        informacion.setEditable(false);
        informacion.setColumns(20);
        informacion.setRows(5);
        jScrollPane2.setViewportView(informacion);

        play.setText("START");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        importar.setText("Importar");

        exportar.setText("Exportar");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });

        estadisticas.setText("Estadisticas");
        estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasActionPerformed(evt);
            }
        });

        interfaces.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una interfaz" }));
        interfaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interfacesActionPerformed(evt);
            }
        });

        alvuelo.setText("En vivo");
        alvuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alvueloActionPerformed(evt);
            }
        });

        jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "HASH", "FECHA", "MAC ORIGEN", "MAC DESTINO", "TIPO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(play)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(estadisticas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alvuelo)
                        .addGap(8, 8, 8)
                        .addComponent(interfaces, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play)
                    .addComponent(importar)
                    .addComponent(exportar)
                    .addComponent(estadisticas)
                    .addComponent(interfaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alvuelo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed

        if(opcion<-1)
            return;
        if(running){
            running = false;
            play.setText("START");
            
            interfaces.setEnabled(true);
            alvuelo.setEnabled(true);
            exportar.setEnabled(true);
        }else{
            running = true;
            interfaces.setEnabled(false);
            alvuelo.setEnabled(false);
            exportar.setEnabled(false);
            t = new Thread(this);
            t.start();
            play.setText("STOP");
        }
    }//GEN-LAST:event_playActionPerformed

    private void interfacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interfacesActionPerformed
        int index = interfaces.getSelectedIndex();
        opcion = index;
    }//GEN-LAST:event_interfacesActionPerformed

    private void alvueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alvueloActionPerformed
            if(!al_vuelo){
                
            interfaces.removeAllItems();
            ArrayList<String> devices = helper.searchInterfaces();
            for(String d:devices){
                interfaces.addItem(d);
            }
            interfaces.setVisible(true);
            al_vuelo = true;
            importar.setEnabled(false);
            play.setEnabled(true);
            }else{
            interfaces.setVisible(false);
            al_vuelo = false;
            importar.setEnabled(true);
            play.setEnabled(false);
            }
        
    }//GEN-LAST:event_alvueloActionPerformed

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed

            try {
                JFileChooser f = new JFileChooser();
            f.showSaveDialog(this);

            //System.out.println(f.getCurrentDirectory());
            System.out.println(f.getSelectedFile());
            File file =f.getSelectedFile();
            List ether = new ArrayList();

                 FileWriter fw = new FileWriter(file + ".cap");
                 BufferedWriter bw = new BufferedWriter(fw);
                 for(int i = 0; i < jt.getRowCount(); i++){
                     for(int j=0; j < jt.getColumnCount(); j++){
                        bw.write(jt.getValueAt(i,j).toString()+" ");
                        if (j== 4){
                            ether.add(jt.getValueAt(i,j).toString());
                            
                        }
                     }
                     bw.newLine();
                 }
                 
                 bw.close();
                 fw.close();
            } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportarActionPerformed

    private void estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasActionPerformed
        StringBuilder textInfo = new StringBuilder();
            int eth=0;
            int arp=0;
            int igmp=0;
            int icmp= 0;
            int tcp =0;
            int udp = 0;
            int ieee=0;
            Boolean flag=true;
            List ether = new ArrayList();
            for(int i = 0; i < jt.getRowCount(); i++){
                for(int j=0; j < jt.getColumnCount(); j++){
                    if (j== 4){
                        textInfo.append(jt.getValueAt(i,j).toString()+" ");
                    }
                }
            }
            String[] s2 = textInfo.toString().split(" ");
            for(int i=0; i<=s2.length-1; i++){
                if("2048".equals(s2[i])){
                    eth++;
                    flag=true;
                }
                if("2054".equals(s2[i])){
                    arp++;
                    flag=true;
                }
                if("1".equals(s2[i])){
                    icmp++;
                    flag=true;
                    
                }
                if("2".equals(s2[i])){
                    igmp++;
                    flag=true;
                }
                
                if("6".equals(s2[i])){
                    tcp++;
                    flag=true;
                }
                if("17".equals(s2[i])){
                    udp++;
                    flag=true;
                }
                if(Integer.parseInt(s2[i])< 1500){
                ieee++;
            }
            }
            System.out.print(eth);
            DefaultPieDataset pieData = new DefaultPieDataset();
            pieData.setValue("Ipv4", new Integer(eth));
            pieData.setValue("ARP", new Integer(arp));
            pieData.setValue("ICMP", new Integer(icmp));
            pieData.setValue("IGMP", new Integer(igmp));
            pieData.setValue("TCP", new Integer(tcp));
            pieData.setValue("UDP", new Integer(udp));
            pieData.setValue("IEEE", new Integer(ieee));
            JFreeChart chart = ChartFactory.createPieChart("Tramas", pieData, true,true,true);
           PiePlot P = (PiePlot)chart.getPlot();
           ChartFrame frame =new ChartFrame("Tramas", chart);
           frame.setVisible(true);
           frame.setSize(450,500);
    }//GEN-LAST:event_estadisticasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alvuelo;
    private javax.swing.JButton estadisticas;
    private javax.swing.JButton exportar;
    private javax.swing.JButton importar;
    private javax.swing.JTextArea informacion;
    private javax.swing.JComboBox<String> interfaces;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jt;
    private javax.swing.JButton play;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        informacion.setText(tramas.get(jt.getSelectedRow()).toString());
    }

    @Override
    public void mousePressed(MouseEvent me) {
        
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        
    }

    @Override
    public void mouseEntered(MouseEvent me) {
       
    }

    @Override
    public void mouseExited(MouseEvent me) {
        
    }

    @Override
    public void run() {
        while(running){
            System.out.println("Running...");
            Trama t = helper.scan(opcion);
            if(t!=null){
            tramas.add(t);
            DefaultTableModel model = (DefaultTableModel) jt.getModel();
            Format formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String fecha =  formatter.format(t.getDate());
            model.addRow(new Object[]{t.hash, fecha,t.getMacO(),t.getMacD(),t.tipo+""});
            }
            try{
                Thread.sleep(1);
            }catch(Exception e){}
        }
    }
}
